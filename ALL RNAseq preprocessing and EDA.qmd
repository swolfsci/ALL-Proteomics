---
title: "ALL cohort RNAseq"
author: "Sebastian Wolf"
format: html
---

```{r}
library(tidyverse)
library(edgeR)
```

there are two healthy donors named "xx50_E02" and "xx50_F02" whereas "70324221535" is missing

```{r}
rna_counts <- read_tsv("Data/Genomics/RNAseq/merged_counts.tsv") %>% 
  janitor::clean_names()

rna_counts <- rna_counts %>% 
  dplyr::select(genes:"d703324202617")
```

we use edgeR to perform standard QC and library size normalization

```{r}
rna_counts <- column_to_rownames(rna_counts, "genes") %>% 
  as.matrix()

# check if any NA rows
rna_counts %>% 
  matrixStats::rowAnyNAs() -> na_vec

rna_counts <- rna_counts[!na_vec,]

# check if any NA cols

rna_counts %>% 
  matrixStats::colAnyNAs() %>% any()

rna_counts_dgelist <- DGEList(rna_counts)
keep <- filterByExpr(rna_counts_dgelist)

rna_counts_dgelist <- rna_counts_dgelist[keep, , keep.lib.sizes = F]
rna_counts_dgelist <- normLibSizes(rna_counts_dgelist, )

#plotMDS(rna_counts_dgelist)

# extract the log2 transformed, size normalized cpms with a prior count (psedo count) added of 2

rna_counts_cpm <- cpm(rna_counts_dgelist, normalized.lib.sizes = T, log = T, prior.count = 2)
```

```{r}
mart <- biomaRt::useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl", mirror = "www")

biomaRt::getBM(mart = mart, values = rownames(rna_counts_cpm), filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "hgnc_symbol"), verbose = T, useCache = T) -> biomart.out

biomart.out %>% 
  distinct(ensembl_gene_id, .keep_all = T) %>% 
  mutate(hgnc_symbol = ifelse(hgnc_symbol == "", NA_character_, stringr::str_trim(hgnc_symbol, side = "both"))) -> biomart.out

# and filter on the coding genome
rna_counts_cpm %>% 
  as_tibble(rownames = "ensemblid") %>% 
  left_join(biomart.out, by=c("ensemblid" = "ensembl_gene_id"), na_matches = "never") %>% 
  filter(!is.na(hgnc_symbol)) %>% 
  slice_head(n=1, by = hgnc_symbol) %>% 
  dplyr::select(-ensemblid) %>% 
  column_to_rownames("hgnc_symbol") -> rna_counts_cpm_coding
```

we also include the ALLcatchR predictions

```{r}
allcatchr <- read_tsv("../Data/Genomics/RNAseq/merged_allcatchr_predictions.tsv")

allcatchr %>% 
  filter(!stringr::str_detect(sample, "MV4|SEM")) %>% 
  mutate(sample = readr::parse_number(sample)) %>% 
  left_join(masterfile_ac, by=c("sample" = "bm_nr")) %>% 
  mutate(sample = as.character(sample)) -> allcatchr

allcatchr[allcatchr$sample == "70324302750" & allcatchr$Score == 0.5, ]$sample <- "70324302750_f02"

allcatchr %>% 
  mutate(sample = 
           ifelse(stringr::str_starts(sample, "703"), 
                  paste0("d", sample),
                  paste0("x", sample))) -> allcatchr
```

```{r}
# Adding a bright cyan color to the palette
colors_15_improved <- c(
  "#FF5733", # Bright Red-Orange
  "#33FF57", # Bright Green
  "#3357FF", # Bright Blue
  "#FF33A1", # Bright Pink
  "#FFC733", # Bright Yellow
  "#57FF33", # Neon Green
  "#FF33FF", # Bright Magenta (Replaces Bright Purple)
  "#33FFF0", # Bright Aqua
  "#FF8033", # Bright Orange
  "#FF3333", # Bright Scarlet
  "#33FF80", # Bright Mint
  "#0099FF", # Bright Sky Blue (Replaces Bright Violet)
  "#F0FF33", # Bright Lime
  "#00AAFF", # Cyan-Blue
  "#FF66CC"  # Bright Coral Pink
)



rna_counts_cpm %>% 
  t() %>% 
  pcaMethods::pca() %>% 
  pcaMethods::scores() %>% 
  as_tibble(rownames = "samples") %>% 
    left_join(allcatchr, by=c("samples" = "sample")) %>% 
  mutate(Prediction = case_when(cohort == "healty_donor" ~ "healthy_donor",
                                Confidence == "unclassified" ~ "unclassified",
                                TRUE ~ Prediction)) %>%  
  ggplot(aes(x=PC1, y = PC2, col = Prediction)) +
  geom_point(size = 2) +
  cowplot::theme_cowplot() +
  scale_discrete_manual(values = colors_15_improved, aesthetics = "col") -> rna_pca_plot

#ggsave(rna_pca_plot, filename = "rna_pca_plot.pdf", device = "pdf", width = 1.7*6, height = 6)
```

## B-ALL gene expression signatures enrichment

```{r}
# while we already have the molecular predictions from ALLCatchR, we will perform a quick cross validation using GSVA and the B-ALL gene expression signatures

library(GSVA)

b_all_signatures <- readxl::excel_sheets("Data/COG RNASeq/B-ALL-subtype-signature.xlsx")

b_all_signatures <- b_all_signatures[!b_all_signatures %in% c("Cohort", "summary")]

imap(b_all_signatures, ~ readxl::read_excel("Data/COG RNASeq/B-ALL-subtype-signature.xlsx", sheet = .x) %>% 
       filter(log2FoldChange > 0 & padj <= 0.05) %>% 
       pull(geneID)) %>% 
  magrittr::set_names(b_all_signatures) -> b_all_signatures_list

imap(b_all_signatures, ~ readxl::read_excel("Data/COG RNASeq/B-ALL-subtype-signature.xlsx", sheet = .x) %>% 
       filter(log2FoldChange > 0 & padj <= 0.05) %>% 
       pull(geneName)) %>% 
  magrittr::set_names(b_all_signatures) -> b_all_signatures_list_gene_names

kmt2a_signature <- readxl::read_excel("Data/COG RNASeq/B-ALL-subtype-signature.xlsx", sheet = "KMT2A")

gsva(gsvaParam(exprData = rna_counts_cpm, geneSets = b_all_signatures_list, kcdf = "Gaussian")) -> rna_counts_gsva_b_all_signatures

tibble("sample" = colnames(rna_counts_gsva_b_all_signatures)) %>% 
  left_join(allcatchr_pred, by="sample") %>% 
  dplyr::select(-sample) %>% 
  ComplexHeatmap::HeatmapAnnotation(df = .) -> heatmap_anno

ComplexHeatmap::Heatmap(rna_counts_gsva_b_all_signatures, top_annotation = heatmap_anno)

rna_counts_gsva_b_all_signatures %>% 
  as_tibble(rownames = "signature") %>% 
  pivot_longer(cols = -signature, names_to = "sample", values_to = "score") %>% 
  group_by(sample) %>% 
  arrange(desc(score), .by_group = T) %>% 
  slice_head(n = 1) %>% 
  left_join(allcatchr_pred, by="sample") 
```
